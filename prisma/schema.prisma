// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String    @unique
  email          String?   @unique
  emailVerified  DateTime? 
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  leagues        League[]
  teams          Team[] 
}

model Account {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  type          String
  provider      String
  providerId    String
  refresh_token String? @db.String
  access_token  String? @db.String
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.String
  session_state String?

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
}

model League {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId       String   @db.ObjectId
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  admin         User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  teams         Team[]  
}

model Team {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  name          String
  points        Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  players       Player[]

  leagueId      String?   @db.ObjectId

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  league        League?   @relation(fields: [leagueId], references: [id])
}


model Player {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  teamId        String   @db.ObjectId
  name          String
  position      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  team          Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}