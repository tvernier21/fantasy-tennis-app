// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String?   @unique
  name           String?
  email          String?   @unique
  emailVerified  DateTime? 
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  leagues        League[]
  teams          Team[] 
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model League {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId       String   @db.ObjectId
  name          String
  private       Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  admin         User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  teams         Team[]  
}


model Team {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  name          String
  points        Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  leagueId      String  @db.ObjectId

  players       Player[]
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  league        League   @relation(fields: [leagueId], references: [id])
}


model Player {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  dob           DateTime?
  weight        String?
  height        String?
  rank          Int
  elo           Float
  isActive      Boolean
  lastMatch     DateTime?
  img           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  teamId        String?   @db.ObjectId

  matchesWon    Match[]  @relation("winner")
  matchesLost   Match[]  @relation("loser")
  playerElos    PlayerElos[]
  teams         Team?    @relation(fields: [teamId], references: [id])
  // tournamentPlayers TournamentPlayer[]
}


model PlayerElos {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  playerId      String   @db.ObjectId
  elo           Float[]
  hard_elo      Float[]
  clay_elo      Float[]
  grass_elo     Float[]
  dates         DateTime[] 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  player        Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
}


// model TournamentPlayer {
//   id            String     @id @default(auto()) @map("_id") @db.ObjectId
//   playerId      String     @db.ObjectId
//   tournamentId  String     @db.ObjectId
//   elo           Float
//   createdAt     DateTime   @default(now())
//   updatedAt     DateTime   @updatedAt

//   player        Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
//   tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
//   matchesWon    Match[]    @relation("winner")
//   matchesLost   Match[]    @relation("loser")
  
//   teamId        String?    @db.ObjectId
//   teams         Team?      @relation(fields: [teamId], references: [id])
// }


model Tournament {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  location      String
  date          DateTime
  surface       String
  difficulty    Int
  img           String?
  link          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // players       TournamentPlayer[]
  matches       Match[]
}


model Match {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  winnerId      String   @db.ObjectId
  loserId       String   @db.ObjectId
  tournamentId  String   @db.ObjectId
  winnerName    String
  loserName     String
  round         String
  score         String
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  winner        Player     @relation("winner", fields: [winnerId], references: [id], onDelete: Cascade)
  loser         Player     @relation("loser", fields: [loserId], references: [id], onDelete: Cascade)
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}