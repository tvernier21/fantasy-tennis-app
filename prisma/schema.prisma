// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  username       String?          @unique
  name           String?
  email          String?          @unique
  emailVerified  DateTime? 
  image          String?
  hashedPassword String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  accounts       Account[]
  adminOf        League[]         @relation("adminOf")
  leagues        UserLeague[]     // Many-to-many relation through a join model
  teams          Team[] 
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model League {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  inviteCode    String           @unique
  name          String
  format        String
  img           String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  adminId       String           @db.ObjectId

  admin         User             @relation("adminOf", fields: [adminId], references: [id])
  users         UserLeague[]     // Many-to-many relation through a join model
  teams         Team[]  
}


// Join model for the many-to-many relation between User and League
model UserLeague {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  leagueId  String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  league    League @relation(fields: [leagueId], references: [id])

  @@unique([userId, leagueId])
}


model Team {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  leagueId      String   @db.ObjectId
  tournamentId  String   @db.ObjectId
  name          String?
  points        Float    @default(0)
  budget        Float    @default(10000)
  teamCapacity  Int      @default(5)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  players       PlayerTeam[]
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  league        League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
}



model Player {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  dob           DateTime?
  weight        String?
  height        String?
  rank          Int
  elo           Float
  yelo          Float?
  fiveSetElo    Float?
  hard_elo      Float?
  clay_elo      Float?
  grass_elo     Float?
  isActive      Boolean
  lastMatch     DateTime?
  numMatches    Int?
  img           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  teamId        String?   @db.ObjectId

  matchesWon    Match[]  @relation("winner")
  matchesLost   Match[]  @relation("loser")
  playerElos    PlayerElos[]
  tournamentPlayers TournamentPlayer[]
}

model PlayerElos {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  playerId      String   @db.ObjectId
  elo           Float[]
  yelo          Float[]
  hard_elo      Float[]
  clay_elo      Float[]
  grass_elo     Float[]
  timeOff       Int?
  dates         DateTime[] 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  player        Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
}


model TournamentPlayer {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  playerId     String   @db.ObjectId
  tournamentId String   @db.ObjectId
  name         String
  elo          Float
  points       Float    @default(0)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  teams        PlayerTeam[]
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  player       Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
}


model PlayerTeam {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String @db.ObjectId
  playerId  String @db.ObjectId
  team      Team   @relation(fields: [teamId], references: [id])
  player    TournamentPlayer @relation(fields: [playerId], references: [id])

  @@unique([teamId, playerId])
}


model Tournament {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  location      String
  date          DateTime
  surface       String
  difficulty    Int
  img           String?
  link          String?
  active        Boolean
  started       Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  players       TournamentPlayer[]
  matches       Match[]
}


model Match {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  winnerId       String   @db.ObjectId
  loserId        String   @db.ObjectId
  tournamentId   String   @db.ObjectId
  tournamentName String
  winner_name    String
  loser_name     String
  round          String
  score          String
  date           DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  winner         Player     @relation("winner", fields: [winnerId], references: [id], onDelete: Cascade)
  loser          Player     @relation("loser", fields: [loserId], references: [id], onDelete: Cascade)
  tournament     Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
}